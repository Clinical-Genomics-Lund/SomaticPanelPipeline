nextflow_workflow {

    name "Test Workflow SNV_CALLING"
    script "subworkflows/local/snv_calling.nf"
    workflow "SNV_CALLING"

    setup {
        
        run("CHECK_INPUT") {
            script "$projectDir/subworkflows/local/create_meta.nf"
            workflow {
                """
                input[0] = file("$projectDir/tests-data/gmslymphomav3-0/23KF00457-lymf_gmslymphomav3-0.csv")
                """
            }
        }

        run("SAMPLE") {
            script "$projectDir/subworkflows/local/sample.nf"
            workflow {
                """
                input[0] = CHECK_INPUT.out.fastq
                """
            }
        }

        run("ALIGN_SENTIEON") {
            script "$projectDir/subworkflows/local/align_sentieon.nf"
            workflow {
                """
                input[0] =  SAMPLE.out.fastq_trim
                input[1] =  CHECK_INPUT.out.meta
                """
            }
        }

        run("QC") {
            script "$projectDir/subworkflows/local/qc.nf"
            workflow {
                """
                input[0] = ALIGN_SENTIEON.out.qc_out
                input[1] = ALIGN_SENTIEON.out.bam_lowcov
                """
            }
        }

    }


    test("Should run without failures") {

        when {
            
            params {
                // define parameters here. Example:
                regions_bed = "/fs1/resources/ref/hg38/bed/lymphoid-twist/v3/lymph_v3_mergedprobes_simple.bed"
            }
            
            workflow {
                """
                Channel
                    .fromPath("${params.regions_bed}")
                    .ifEmpty { exit 1, "Regions bed file not found: ${params.regions_bed}" }
                    .splitText( by: 1000, file: 'bedpart.bed' )
                    .set { beds }
                
                // define inputs of the workflow here. Example:
                input[0] = ALIGN_SENTIEON.out.bam_umi.groupTuple()
                input[1] = ALIGN_SENTIEON.out.bam_dedup
                input[2] = beds                
                input[3] = CHECK_INPUT.out.meta
                input[4] = QC.out.melt_qc
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
