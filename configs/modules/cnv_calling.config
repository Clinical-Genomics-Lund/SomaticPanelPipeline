/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.args4           = fourth set of arguments appended to command in module (multi-tool modules).
        ext.args5           = fifth set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
        ext.suffix          = File name suffix for output files.
        ext.suffix2         = File name suffix for output2 files.
        ext.when            = Conditional clause
----------------------------------------------------------------------------------------
*/

process {

    withName: '.*CNV_CALLING:CNVKIT_BATCH' {
        container = "${params.container_dir}/cnvkit099.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/cnvkit",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.cnvkit
    }

    withName: '.*CNV_CALLING:CNVKIT_BACKBONE' {
        container = "${params.container_dir}/cnvkit099.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/cnvkit",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.cnvkit
    }

    withName: '.*CNV_CALLING:CNVKIT_EXONS' {
        container = "${params.container_dir}/cnvkit099.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/cnvkit",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.cnvkit
    }

    withName: '.*CNV_CALLING:CNVKIT_GENS' {
        container = "${params.container_dir}/cnvkit099.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/gens",
            mode: 'copy',
            overwrite: true,
            pattern: '*.bed.gz',
        ]

        ext.when    = params.cnvkit
    }

    withName: '.*CNV_CALLING:CNVKIT_PLOT' {
        container = "${params.container_dir}/cnvkit099.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/plots",
            mode: 'copy',
            overwrite: true,
            pattern: '*.png',
        ]

        ext.when    = params.cnvkit
    }

    withName: '.*CNV_CALLING:CNVKIT_CALL' {
        container = "${params.container_dir}/cnvkit099.sif"

        publishDir = [
            [ 
                path: "${params.outdir}/${params.subdir}/cnvkit/segments/",
                mode: 'copy',
                overwrite: true,
                pattern: '*call*.cns',
            ],
            [ 
                path: "${params.outdir}/${params.subdir}/svvcf/",
                mode: 'copy',
                overwrite: true,
                pattern: '*.vcf',
            ],
        ]

        ext.when    = params.cnvkit

    }

    withName: '.*CNV_CALLING:CNVKIT_CALL_TC' {
        container = "${params.container_dir}/cnvkit099.sif"

        publishDir = [
            [ 
                path: "${params.outdir}/${params.subdir}/cnvkit/segments/",
                mode: 'copy',
                overwrite: true,
                pattern: '*call*.cns',
            ],
            [ 
                path: "${params.outdir}/${params.subdir}/svvcf/",
                mode: 'copy',
                overwrite: true,
                pattern: '*.vcf',
            ],
        ]
        ext.when    = params.cnvkit
    }

    withName: '.*CNV_CALLING:MERGE_GENS' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [
            [ 
                path: "${params.outdir}/${params.subdir}/gens",
                mode: 'copy',
                overwrite: true,
                pattern: '*.bed.gz*'
            ],
            [ 
                path: "${params.outdir}/cron/gens",
                mode: 'copy',
                overwrite: true,
                pattern: '*.gens',
            ],
        ]

    }

    withName: '.*CNV_CALLING:GATKCOV_BAF' {
        container   = "${params.container_dir}/gatk_4.1.9.0.sif"
        ext.when    = params.gatk_cnv
        ext.args    = { "-L ${params.GATK_GNOMAD} -R ${params.genome_file}" }
    }

    withName: '.*CNV_CALLING:GATKCOV_COUNT' {
        container = "${params.container_dir}/gatk_4.1.9.0.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/gatkcov",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.gatk_cnv
        ext.args    = { "-L ${params.gatk_intervals_full} --interval-merging-rule OVERLAPPING_ONLY" }
        ext.args2   = { "--count-panel-of-normals ${params.GATK_pon}" }
        ext.args3   = { "--sequence-dictionary ${params.GENOMEDICT} --minimum-contig-length 46709983" }
        ext.prefix  = { "${meta.id}" }
    }

    withName: '.*CNV_CALLING:GATKCOV_CALL' {
        container = "${params.container_dir}/gatk_4.1.9.0.sif"

        publishDir = [
            [ 
                path: "${params.outdir}/${params.subdir}/gatkcov",
                mode: 'copy',
                overwrite: true,
                pattern: '*.seg'
            ],
            [ 
                path: "${params.outdir}/${params.subdir}/plots",
                mode: 'copy',
                overwrite: true,
                pattern: '*.png'
            ],
        ]

        ext.when    = params.gatk_cnv
        ext.args    = { "--minimum-total-allele-count-normal 20" }
        ext.args2   = { "" }
        ext.args3   = { "--sequence-dictionary ${params.GENOMEDICT} --minimum-contig-length 46709983" }
    }

    withName: '.*CNV_CALLING:GATK2VCF' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.gatk_cnv
        ext.args    = { "-p ${meta.purity}"}
        ext.prefix  = { "${meta.id}"}
    }

    withName: '.*CNV_CALLING:GATK_COUNT_GERMLINE' {
        container = "${params.container_dir}/gatk_4.1.9.0.sif"

        ext.when    = params.gatk_cnv
        ext.args    = {"-L ${params.gatk_intervals} -R ${params.genome_file} -imr OVERLAPPING_ONLY --format TSV"}
        ext.prefix  = {"${meta.id}"}
    }

    withName: '.*CNV_CALLING:GATK_CALL_PLOIDY' {
        container = "${params.container_dir}/gatk_4.1.9.0.sif"

        ext.when    = params.gatk_cnv
        ext.args    = { "--model ${params.ploidymodel}" }
    }

    withName: '.*CNV_CALLING:GATK_CALL_GERMLINE_CNV' {
        container = "${params.container_dir}/gatk_4.1.9.0.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/",
            mode: 'copy',
            overwrite: true,
            pattern: '*.vcf'
        ]

        ext.when    = params.gatk_cnv
        ext.args    = { "--run-mode CASE " }
    }

    withName: '.*CNV_CALLING:FILTER_MERGE_GATK' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.when    = params.gatk_cnv
    }

    withName: '.*CNV_CALLING:MERGE_GATK_TUMOR' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.gatk_cnv
        ext.prefix = { "${meta.id}" }
    }

    withName: '.*CNV_CALLING:POSTPROCESS' {
        container = "${params.container_dir}/gatk_4.1.9.0.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.gatk_cnv
        ext.prefix  = { "${meta.id}" }
        ext.args    = { "--allosomal-contig X --allosomal-contig Y --sample-index 0 --sequence-dictionary ${params.GENOMEDICT}" }
    }

    withName: '.*CNV_CALLING:MANTA' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/",
            mode: 'copy',
            overwrite: true,
            pattern: '*.vcf'
        ]

        ext.when    = params.manta
        ext.args    = { "--reference ${params.genome_file} --exome --generateEvidenceBam" }
        ext.args2   = { "-m local -j ${task.cpus}" }
    }


    withName: '.*CNV_CALLING:JOIN_TUMOR' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/merged/",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        def conditionsMet = [params.manta, params.cnvkit, params.gatk_cnv].count { it }
        ext.when    = { conditionsMet >= 2 }
        ext.args    = { "--bnd_distance 2500 --no_intra --pass_only --overlap 0.7" }
    }

    withName: '.*CNV_CALLING:JOIN_NORMAL' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf/merged/",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = { params.manta && params.gatk_cnv }
        ext.args    = { "--bnd_distance 2500 --no_intra --pass_only --overlap 0.7 " }
    }

    withName: '.*CNV_CALLING:FILTER_MANTA_TUMOR' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.manta
        ext.args    = { "--id ${meta.id} --af 0.05" }
    }


    withName: '.*CNV_CALLING:FILTER_MANTA_NORMAL' {
        container = "${params.container_dir}/SomaticPanelPipeline_2021-06-24.sif"

        publishDir = [ 
            path: "${params.outdir}/${params.subdir}/svvcf",
            mode: 'copy',
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        ext.when    = params.manta
        ext.args    = { "--id ${meta.id} --af 0.05" }
    }
}